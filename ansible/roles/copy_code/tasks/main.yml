# Configure the sensors appropriately for each production board
- name: Configure for production outdoor weather
  delegate_to: localhost
  ansible.builtin.set_fact:
    sensors:
      - type: bme280
        i2c_address: 119
        enable_additional_data: true
        topic: home/outdoor/weather
  when: is_production is defined and is_production == true and mqtt_client_id == 'outdoor'

- name: Configure for production outdoor air quality
  delegate_to: localhost
  ansible.builtin.set_fact:
    sensors:
      - type: pms5003
        rx_pin: 26
        topic: home/outdoor/airquality
  when: is_production is defined and is_production == true and mqtt_client_id == 'airquality'

- name: Configure for production indoor weather and air quality
  delegate_to: localhost
  ansible.builtin.set_fact:
    sensors:
      - type: bme280
        i2c_address: 119
        enable_additional_data: false
        topic: home/indoor/weather
      - type: ens160
        i2c_address: 83
        topic: home/indoor/airquality
  when: is_production is defined and is_production == true and mqtt_client_id == 'indoor'

- name: Configure for production office weather
  delegate_to: localhost
  ansible.builtin.set_fact:
    sensors:
      - type: dht22
        rx_pin: 26
        topic: home/office/weather
  when: is_production is defined and is_production == true and mqtt_client_id == 'office'

- name: Configure for production back room weather
  delegate_to: localhost
  ansible.builtin.set_fact:
    sensors:
      - type: dht22
        rx_pin: 26
        topic: home/backroom/weather
  when: is_production is defined and is_production == true and mqtt_client_id == 'backroom'

# Generate the configuration file and copy code to the board
- name: Generate config.json
  delegate_to: localhost
  ansible.builtin.template:
    src: templates/config.j2
    dest: "{{ lookup('env', 'PWD') }}/src/config.json"

- name: Get current Git commit hash
  delegate_to: localhost
  ansible.builtin.command: git rev-parse --short HEAD
  register: repository

- name: Write Git commit hash to .version file
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ repository.stdout }}"
    dest: "{{ lookup('env', 'PWD') }}/src/.version"

- name: Copy files to board and restart
  delegate_to: localhost
  ansible.builtin.command:
    chdir: "{{ lookup('env', 'PWD') }}/src"
    cmd: "mpremote connect port:{{ boards[board].serial_port }} cp -r . : + reset"

- name: Delete local config.json after production run
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ lookup('env', 'PWD') }}/src/config.json"
    state: absent
  when: is_production is defined and is_production == true
